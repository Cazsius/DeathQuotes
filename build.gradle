println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

subprojects {
    version = "${minecraft_version}-${mod_version}"
    group = mod_group_id

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
        options.release.set(JavaLanguageVersion.of(minecraft_java_build_version).asInt())
    }

    def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta', 'fabric.mod.json']
    def replaceProperties = [
            minecraft_version            : minecraft_version,
            forge_minecraft_version_range: forge_minecraft_version_range,
            forge_version                : forge_version,
            forge_version_range          : forge_version_range,
            forge_loader_version_range   : forge_loader_version_range,
            mod_id                       : mod_id,
            mod_name                     : mod_name,
            mod_license                  : mod_license,
            mod_version                  : mod_version,
            mod_authors                  : mod_authors,
            mod_description              : mod_description
            // TODO: Add for fabric replacements!!!
    ]
    tasks.withType(ProcessResources).configureEach {
        inputs.properties replaceProperties
        replaceProperties.put 'project', project

        filesMatching(resourceTargets) {
            expand replaceProperties
        }
    }

    tasks.withType(Jar).configureEach {
        manifest {
            attributes([
                    "Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_authors,
                    "Specification-Version"   : mod_version,
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }
}